*ArgsAndMore.txt*       Apply commands to multiple buffers and manage the argument list.

		       ARGS AND MORE    by Ingo Karkat
							     *ArgsAndMore.vim*
description			|ArgsAndMore-description|
usage				|ArgsAndMore-usage|
installation			|ArgsAndMore-installation|
configuration			|ArgsAndMore-configuration|
limitations			|ArgsAndMore-limitations|
known problems			|ArgsAndMore-known-problems|
todo				|ArgsAndMore-todo|
history				|ArgsAndMore-history|

==============================================================================
DESCRIPTION					     *ArgsAndMore-description*

This plugin supports you with batch processing many files by extending the
built-in |:windo|, |:argdo|, etc. commands. You can filter the argument list,
add files _not_ matching a pattern, convert between arguments and quickfix
list, and apply arbitrary Ex commands (also partially) via |:Argdo|, then
analyze any errors and retry on an argument list where the successfully
processed arguments have been removed.

SEE ALSO								     *

RELATED WORKS								     *

- The :ArgsNegated command was inspired by the following Stack Overflow
  question:
    http://stackoverflow.com/questions/11547662/how-can-i-negate-a-glob-in-vim
- The https://github.com/nelstrom/vim-qargs plugin has a :Qargs command
  similar (but more simplistic) than :CListToArgs.

==============================================================================
USAGE							   *ArgsAndMore-usage*

								      *:Bufdo*
:Bufdo {cmd}		Execute {cmd} in each buffer in the buffer list, then
			return back to the original one.
			Any encountered errors are also put into the
			|quickfix| list.
								 *:BufdoWrite*
:BufdoWrite {cmd}	Execute {cmd} in each buffer in the buffer list and
			automatically persist any changes (|:update|).
								      *:Windo*
:Windo {cmd}		Execute {cmd} in each window, then return back to the
			original one.
								   *:Winbufdo*
:Winbufdo {cmd}		Execute {cmd} in each different buffer shown in one of
			the windows in the current tab page (once per buffer),
			then return back to the original one.
								      *:Tabdo*
:Tabdo {cmd}	        Execute {cmd} once in each tab page, then return back
			to the original one.
								   *:Tabwindo*
:Tabwindo {cmd}		Execute {cmd} in each open window on each tab page,
			then return back to the original one.
								      *:Argdo*
:Argdo {cmd}		Execute {cmd} for each file in the argument list, then
			return back to the original file and argument.
:[range]Argdo {cmd}	Execute {cmd} for the [range] of indices from the
			argument list, then return back to the original file
			and argument.
			For example, to execute {cmd} on the remaining
			arguments, use :.,$Argdo {cmd}

			In contrast to |:argdo|, this also avoids the
			|hit-enter| prompt (all files will be processed
			without further interaction from you), and an error
			summary will be printed.
			To work on the errors / arguments with errors, you can
			use |:ArgdoErrors| and |:ArgdoDeleteSuccessful|.
			Also, any encountered errors are put into the
			|quickfix| list.
								 *:ArgdoWrite*
:ArgdoWrite {cmd}	Execute {cmd} in each buffer in the argument list and
			automatically persist any changes (|:update|).

								*:ArgdoErrors*
:ArgdoErrors		List all error messages that occurred during the last
			|:Argdo| command, and for each unique error, print the
			argument number and filespec.
						      *:ArgdoDeleteSuccessful*
:ArgdoDeleteSuccessful	Delete those arguments from the argument list that
			didn't cause any error messages during the last
			|:Argdo| command.

								 *:ArgsFilter*
:ArgsFilter {expr}	Apply the |filter()| of {expr} to the argument list,
			and keep only those where {expr} yields true. This
			allows you to |:argdelete| multiple arguments at once
			and to delete without specifying the full filename.
								*:ArgsNegated*
:ArgsNegated[!] {arglist}
			Define all files except {arglist} as the new argument
			list and edit the first one.

								   *:ArgsList*
:ArgsList[!] 	    	List each argument number and filespec in a neat list
			(not just one after the other as |:args|). With [!],
			expand all arguments to absolute filespecs.
:ArgsList[!] {glob}	List each argument number and filespec that matches
			(with [!]: does not match) {glob} in a neat list.
			Matching and printing is done to the full filespec.

							     *:ArgsToQuickfix*
:ArgsToQuickfix		Show all arguments as a quickfix list.

					      *:CListToArgs* *:CListToArgsAdd*
:CListToArgs		Convert the files in the quickfix list to arguments.
:[count]CListToArgsAdd
					      *:LListToArgs* *:LListToArgsAdd*
:LListToArgs		Convert the files in the window's location list to
:[count]LListToArgsAdd	arguments.


==============================================================================
INSTALLATION					    *ArgsAndMore-installation*

This script is packaged as a |vimball|. If you have the "gunzip" decompressor
in your PATH, simply edit the *.vmb.gz package in Vim; otherwise, decompress
the archive first, e.g. using WinZip. Inside Vim, install by sourcing the
vimball or via the |:UseVimball| command. >
    vim ArgsAndMore*.vmb.gz
    :so %
To uninstall, use the |:RmVimball| command.

DEPENDENCIES					    *ArgsAndMore-dependencies*

- Requires Vim 7.0 or higher.
- Requires the |ingo-library.vim| plugin (vimscript #4433), version 1.006 or
  higher.

==============================================================================
CONFIGURATION					   *ArgsAndMore-configuration*

						  *g:ArgsAndMore_AfterCommand*
After each {cmd}, an extra Ex command (sequence) can be executed. By default,
a delay of 100 ms is introduced here. This allows you to abort an interactive
:s///c substitution by pressing CTRL-C twice within the delay. (Without the
delay, it may or may not abort.) To also persist any changes to the buffer,
you could use: >
    let g:ArgsAndMore_AfterCommand = 'update | sleep 100m'
<
==============================================================================
LIMITATIONS					     *ArgsAndMore-limitations*

KNOWN PROBLEMS					  *ArgsAndMore-known-problems*

TODO							    *ArgsAndMore-todo*

IDEAS							   *ArgsAndMore-ideas*

==============================================================================
HISTORY							 *ArgsAndMore-history*

1.20	RELEASEME
- ENH: Add :ArgdoWrite and :BufdoWrite variants that also perform an automatic
  :update.
- ENH: Add errors from :Argdo and :BufDo to the quickfix list to allow easier
  rework.
- Avoid script errors when using :Argdo 3s/foo/bar
- Minor: Change :Argdo[Write] -range=-1 default check to use <count>, which
  maintains the actual -1 default, and therefore also delivers correct results
  when on line 1.

1.11	15-Jan-2013
FIX: Factor out s:sort() and also use numerical sort in the one missed case.

1.10	10-Sep-2012
- Add g:ArgsAndMore_AfterCommand hook before buffer switching and use this by
  default to add a small delay, which allows for aborting an interactive s///c
  substitution by pressing CTRL-C twice within the delay.
- Add :Bufdo command for completeness, to get the new hook, and the enhanced
  error reporting of :Argdo.

1.01	27-Aug-2012
- Do not use <f-args> because of its unescaping behavior.
- FIX: "E480: No match" on :ArgsNegated with ../other/path relative argument;
  need to issue a dummy :chdir to convert relative args before doing the
  :argdelete.

1.00	30-Jul-2012
First published version.

0.01	26-Aug-2008
Started development.

==============================================================================
Copyright: (C) 2012-2013 Ingo Karkat
The VIM LICENSE applies to this plugin; see |copyright|.

Maintainer:	Ingo Karkat <ingo@karkat.de>
==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
